enum RefreshIntervals {
  DAILY
  WEEKLY
  MONTHLY
  NEVER
}
enum PlaylistFilter {
  TOP
  TOP_UPBEAT
  TOP_CHILL
}
enum PlaylListMode {
  TOP
  COLLABORATIVE
  RECOMMENDATIONS
}

enum Scale {
  DOW
  HOUR
  DAY
  WEEK
  MONTH
}
enum PlaylistSource {
  PERSONAL
  GLOBAL
}
type Error {
  message: String!
}
type Image {
  url: String!
  height: Int!
  width: Int!
}
type Artist {
  id: String!
  name: String!
  cover: [Image]!
  songs: [Song]!
}

type Song {
  id: String!
  name: String!
  cover: [Image]!
  artists: [Artist]
}

type SongInfo {
  plays: Int!
  minutes: Float!
  song: Song!
}

type ArtistInfo {
  plays: Int!
  minutes: Float!
  artist: Artist!
}

enum PlayState {
  PLAYING
  PAUSED
  NONE
}

type Status {
  playing: Song
  playState: PlayState
}
type StatPoint {
  minutes: Float
  plays: Int
  artists: [ArtistInfo]!
  songs: [SongInfo]!
  time: String!
}

type Stats {
  from: String!
  to: String!
  scale: Scale!
  wantedSteps: Int!
  steps: [StatPoint]!
  total: StatPoint!
}

type Playlist {
  id:String!
  name: String!
  description: String
  mode: PlaylListMode
  filtering: PlaylistFilter 
  refreshEvery: RefreshIntervals
  timespan_ms: Float!
  source: PlaylistSource
  songs: [Song]!
}
interface GeneralUser {
  id: String!
  image_url: String
  name: String!
  mostPlayedSongs(
    take: Int
    skip: Int
    from: String
    to: String
    global: Boolean
  ): [SongInfo]!
  mostPlayedArtists(
    take: Int
    skip: Int
    from: String
    to: String
    global: Boolean
  ): [ArtistInfo]!
}
type PublicUser implements GeneralUser {
  id: String!
  image_url: String
  name: String!
  mostPlayedSongs(
    take: Int
    skip: Int
    from: String
    to: String
    global: Boolean
  ): [SongInfo]!
  mostPlayedArtists(
    take: Int
    skip: Int
    from: String
    to: String
    global: Boolean
  ): [ArtistInfo]!
}
type MeUser implements GeneralUser {
  id: String!
  image_url: String
  name: String!
  email: String!
  mostPlayedSongs(
    take: Int
    skip: Int
    from: String
    to: String
    global: Boolean
  ): [SongInfo]!
  mostPlayedArtists(
    take: Int
    skip: Int
    from: String
    to: String
    global: Boolean
  ): [ArtistInfo]!
  stats(
    from: String
    to: String
    steps: Int!
    scale: Scale!
    global: Boolean
  ): Stats!
  status: Status!
  reportIntervals: [Scale]!
  token: String!

  previewPlaylist(
    params: CreatePlaylist!
  ): [Song]!
  
  playlists:[Playlist]!
  publicDisplay:Boolean!
}

type AuthentificationResponse {
  token: String!
  user: MeUser!
}
type SimpleMessage {
  message: String!
}
type PublicUserList {
  users: [PublicUser]!
}
type LeaderboardEntry {
  user: PublicUser!
  minutes: Float!
  plays: Int!
}
type LeaderboardEntries {
  entries: [LeaderboardEntry]!
}
type Artists {
  artists: [Artist]!
}
union UserOrError = MeUser | Error
union AuthentificationResponseOrError = AuthentificationResponse | Error
union SimpleResponse = SimpleMessage | Error

union PublicUsersOrError = PublicUserList | Error
union LeaderboardEntriesOrError = LeaderboardEntries | Error
union ArtistOrError = Artists | Error

type PlaylistCreationResponse {
  success: Boolean!
  message: String!
  id: String
  songs: [Song]
}
input CreatePlaylist {
  mode: PlaylListMode! = TOP
  filtering: PlaylistFilter! = TOP
  refreshEvery: RefreshIntervals! = WEEK
  timespan_ms: Float!
  name: String!
  source: PlaylistSource! = PERSONAL
}
type UserMutations {
  delete: SimpleResponse!
  triggerExport: SimpleResponse!
  setReportInterval(scale: Scale!, val: Boolean!): SimpleResponse!
  setPublicDisplay(publicDisplay:Boolean!):SimpleResponse!
  createPlaylist(params: CreatePlaylist!): PlaylistCreationResponse!
}

type Mutation {
  registerOrLogin(
    code: String!
    redirectUrl: String!
  ): AuthentificationResponseOrError!
  me: UserMutations!
}
type Query {
  clientToken: String!
  me: UserOrError!
  findUser(query: String!): PublicUsersOrError
  leaderboard(
    from: String!
    artistId: String
    to: String
    take: Int
    skip: Int

  ): LeaderboardEntriesOrError
  findArtist(
    query: String!
    take: Int
    skip: Int
    
  ): ArtistOrError
}
