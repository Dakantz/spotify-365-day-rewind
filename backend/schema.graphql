type Error {
  message: String
}
type Image {
  url: String!
  height: Int!
  width: Int!
}
type Artist {
  name: String!
  cover: [Image]!
  songs: [Song]!
}

type Song {
  name: String!
  cover: [Image]!
  artist: [Artist]!
}

type SongInfo {
  plays: Int!
  minutes: Float!
  song: Song!
}

type ArtistInfo {
  plays: Int!
  minutes: Float!
  artist: Artist!
}

enum PlayState {
  PLAYING
  PAUSED
  NONE
}

type Status {
  playing: Song
  playState: PlayState
}
type StatPoint {
  minutes: Float
  plays: Int
  artists: [ArtistInfo]!
  songs: [SongInfo]!
  time: Int!
}

enum Scale {
  DOW
  HOUR
  DAY
  WEEK
  MONTH
}
type Stats {
  from: String!
  to: String!
  scale: Scale!
  wantedSteps: Int!
  steps: [StatPoint]!
  total: StatPoint!
}
type User {
  name: String!
  email: String!
  mostPlayedSongs(take: Int, skip: Int, from: String, to: String): [SongInfo]!
  mostPlayedArtists(
    take: Int
    skip: Int
    from: String
    to: String
  ): [ArtistInfo]!
  status: Status!
  stats(from: String, to: String, steps: Int!, scale: Scale!): Stats!
  token: String!
}
union UserAndError = User | Error

type AuthentificationResponse {
  token: String!
  user: User!
}

union AuthentificationResponseAndError = AuthentificationResponse | Error

type Mutation {
  registerOrLogin(
    code: String!
    redirectUrl: String!
  ): AuthentificationResponseAndError!
}

type Query {
  clientToken: String!
  me: UserAndError!
}
